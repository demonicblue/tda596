# Send lock requests to remote nodes and wait for reply.
# Returns once all nodes in Wnodes have replied "Ok"
def lock_remote_nodes():

  for node in mycontext['Wnodes']:
    locked = False
    while not locked:
      socket = openconn(node, mycontext['port'])
      socket.send('Lock')

      recvmsg = ''

      try:
        recvmsg = socket.recv(1024) # Receive message,
      except Exception, e:
        print 'Exception: '+str(e)

      if recvmsg == "Ok":
          locked = True

      else:
        sleep(1)

# Send out unlock requests to remote nodes
# Don't wait for reply
def unlock_remote_nodes():
  send_to_nodes("Unlock")

# Write the board to remote nodes
def write_nodes():
  send_to_nodes("Write" + '%'.join(mycontext['messages']))

# Request the board of remote nodes and compare to its own.
# If remote board has a higher revision (length is longer than local copy),
# then replace the local copy.
def read_nodes():

  for node in mycontext['Wnodes']:
    socket = openconn(node, mycontext['port'])
    socket.send('Read')

    msglist = []
    recvmsg = ''
    try:
      recvmsg = socket.recv(1024) # Receive message,
    except Exception, e:
      print 'Exception: '+str(e)
      continue

    msglist = recvmsg.split('%')

    if len(mycontext['messages']) < len(msglist):
      mycontext['messages'] = msglist



# Send message to all Wnodes
def send_to_nodes(message):
  for node in mycontext['Wnodes']:
    send_to_node(node, message)

# Send message to the specified node
def send_to_node(ip, message):
  # If an exception is raised while trying to send to a node the message will
  # be resent up to five times. This is especially useful during the initital
  # setup where some nodes might want to start sending message before other nodes
  # are ready to receive messages
  counter = 5
  while counter > 0:
    socket = None
    try:
       socket = openconn(ip, mycontext['port'])
       socket.send(message)
       socket.close()
       return
    except Exception, e:
      if str(e).find('Connection refused') >= 0:
        # If a connection was opened, close the socket
        if socket:
          socket.close()
        counter -= 1
        # Halt briefly before resending
        sleep(1)

  # If maximum number of retries is reached without sending successfully we
  # can no longer guarantee correct service so the node is shut down.
  # In a dynamic solution we would here take steps to handle the loss of the 
  # unresponsive node
  print getmyip() + ' Exiting'
  exitall()

# Make one string from list of messages
def get_messages():
  mycontext['lock'].acquire()
  msgs = "\n<br />".join(mycontext['messages'])
  mycontext['lock'].release()
  return msgs

# Generate HTML for the board with messages
def get_html():
  htmlresponse = """
<!DOCTYPE html>
<html>
<head>
  <meta content="text/html; charset=utf-8" http-equiv="content-type">
  <title>Blackboard Group 31</title>
</head>
<body>
  <h2> Board Content</h2>
  <p>"""+get_messages()+"""</p>
  <br>
  <h3>Submit to board</h3>
  <textarea rows="4" cols="50" name="comment" form="usrform"></textarea>
  <form action="" id="usrform" method="post">
  <input type="submit">
  </form>
</body>
</html>
"""
  return htmlresponse

# Generate HTTP-request with page content
def get_raw_page():
  htmlresponse = get_html()
  httpresponse = "HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
    "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse)
  return httpresponse

def board(ip, port, sockobj, thiscommhandle, listencommhandle):
  # Used to handle potential errors on recv to keep node from crashing
  msgheader = ''
  try:
    msgheader = sockobj.recv(1024) # Receive message, 
  except Exception, e:
    print 'Exception: '+str(e)
    stopcomm(thiscommhandle)

  # React depending on message type: HTTP GET or POST, message from other node
  # or some other type of communication.

  if msgheader.startswith( 'GET' ):
    # Return blackboard
    read_nodes()
    sockobj.send(get_raw_page())
    stopcomm(thiscommhandle)

  elif msgheader.startswith( 'POST' ):
    process_post(msgheader, sockobj, thiscommhandle)

  elif msgheader.startswith( 'Read' ):
    sockobj.send( '%'.join( mycontext['messages'] ) )
    stopcomm(thiscommhandle)

  # Replace local copy of the board with the one received
  elif msgheader.startswith( 'Write' ):
    word = 'Write'
    mycontext['messages'] = msgheader[msgheader.find(word)+len(word):].split("%")

  elif msgheader.startswith( 'Lock' ):
    if mycontext['lock'].acquire(False):
      sockobj.send('Ok')
    else:
      sockobj.send('No')

    stopcomm(thiscommhandle)

  elif msgheader.startswith( 'Unlock' ):
    mycontext['lock'].release()

    stopcomm(thiscommhandle)


  # Other type of message
  else:
    print 'unkown message: '+msgheader+' from '+str(ip)+':'+str(port)
    stopcomm(thiscommhandle)

# Parses a POST, stores the included message to the board and forwards the
# message to the other nodes
def process_post(msgheader, sockobj, thiscommhandle):
  # Parse out comment and save
  word = "comment="
  message = msgheader[msgheader.find(word)+len(word):]

  # Try to acquire the lock of remote nodes before adding mesage to the board
  lock_remote_nodes()
  # Read to make sure we have the latest copy
  read_nodes()

  mycontext['messages'].append( message )
  # Propagate the new board
  write_nodes()

  unlock_remote_nodes()
  
  # Return blackboard
  sockobj.send(get_raw_page())
  stopcomm(thiscommhandle)

# Read IP addresses from file and save them in mycontext
def find_nodes(filename):
  mycontext['nodes'] = []
  ipfile = open(filename, "r")
  for line in ipfile:
    line = line.rstrip()
    mycontext['nodes'].append(line)
  ipfile.close()

  mycontext['nodes'].sort()

  # Find the index of this node in the list of node ip addresses and choose
  # the next W nodes to write and read from
  myix = mycontext['nodes'].index(ip)
  mycontext['Wnodes'] = []

  N = len(mycontext['nodes'])
  W = N/2 + 1
  
  for i in range(W):
    index = (i+myix) % N # Wrap around the list
    mycontext['Wnodes'].append( mycontext['nodes'][index] )

  # Sort so that the highest ordered node is always contacted first
  mycontext['Wnodes'].sort()



if callfunc == 'initialize':
  if len(callargs) > 1:
    raise Exception("Too many call arguments")

  # Running remotely (assuming that we pass input argument only remotely):
  # whenever this vessel gets a connection on its IPaddress:Clearinghouseport
  # it'll call function board
  elif len(callargs) == 1:
    port = int(callargs[0])
    ip = getmyip()
    mycontext['port'] = port
    mycontext['messages'] = []
    mycontext['lock'] = getlock()

    find_nodes("ipaddresses.txt")

  # Running locally:
  # whenever we get a connection on 127.0.0.1:12345 we'll call board
  else:
    port = 12345
    ip = '127.0.0.1'
  
  listencommhandle = waitforconn(ip,port,board)