# Send message to all other nodes
def send_to_nodes(message):
  for node in mycontext['nodes']:
    if node != getmyip():
      #socket = openconn(node, mycontext['port'])
      #socket.send(message)
      #socket.close()
      send_to_node(node, message)

# Send message to the specified node
def send_to_node(ip, message):
  # If an exception is raised while trying to send to a node the message will
  # be resent up to five times. This is especially useful during the initital
  # setup where some nodes might want to start an election before its neighbor
  # is ready to receive messages
  counter = 5
  while counter > 0:
    socket = None
    try:
       socket = openconn(ip, mycontext['port'])
       socket.send(message)
       socket.close()
       return
    except Exception, e:
      if str(e).find('Connection refused') >= 0:
        # If a connection was opened, close the socket
        if socket:
          socket.close()
        counter -= 1
        # Halt briefly before resending
        sleep(1)

  # If maximum number of retries is reached without sending successfully we
  # can no longer guarantee correct service so the node is shut down.
  # In a dynamic solution we would here take steps to handle the loss of the 
  # unresponsive node
  print getmyip() + ' Exiting'
  exitall()

# Make one string from list of messages
def get_messages():
  return '\n<br />'.join(mycontext['messages'])

# Generate HTML for the board with messages
def get_html():
  htmlresponse = """
<!DOCTYPE html>
<html>
<head>
  <meta content="text/html; charset=utf-8" http-equiv="content-type">
  <title>Blackboard Group 31</title>
</head>
<body>
  <h2> Board Content</h2>
  <p>"""+get_messages()+"""</p>
  <br>
  <h3>Submit to board</h3>
  <textarea rows="4" cols="50" name="comment" form="usrform"></textarea>
  <form action="" id="usrform" method="post">
  <input type="submit">
  </form>
  <p>My ID: """+str(mycontext['myid'])+"""</p>
  <p>Leader: """+str(mycontext['leaderid'])+' '+str(mycontext['leaderip'])+"""
  </p>
</body>
</html>
"""
  return htmlresponse

# Generate HTTP-request with page content
def get_raw_page():
  htmlresponse = get_html()
  httpresponse = "HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
    "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse)
  return httpresponse

def board(ip, port, sockobj, thiscommhandle, listencommhandle):
  # Used to handle potential errors on recv to keep node from crashing
  msgheader = ''
  try:
    msgheader = sockobj.recv(1024) # Receive message, 
  except Exception, e:
    print 'Exception: '+str(e)
    stopcomm(thiscommhandle)

  # React depending on message type: HTTP GET or POST, Leader election,
  # message from leader or some other type of communication.

  if msgheader.startswith( 'GET' ):
    # Return blackboard
    sockobj.send(get_raw_page())
    stopcomm(thiscommhandle)

  elif msgheader.startswith( 'POST' ):
    # If this node is the leader it should add the message contained in the
    # POST to the board and send the message to all other nodes
    if mycontext['leaderip'] == getmyip():
      # Parse out comment and save
      word = "comment="
      message = msgheader[msgheader.find(word)+len(word):]

      # Try to acquire the lock before adding mesage to the board
      mycontext['lock'].acquire()
      mycontext['messages'].append(message)      

      # Return blackboard
      sockobj.send(get_raw_page())
      stopcomm(thiscommhandle)

      send_to_nodes('Message:'+message)

      # Release the lock _after_ sending the message to all other nodes
      mycontext['lock'].release()

    # If this node is not the leader, forward the message to the leader
    else:
      # Return blackboard
      sockobj.send(get_raw_page())
      stopcomm(thiscommhandle)

      # If a leader has been elected, forward the message to it
      if mycontext['leaderid']:
        send_to_node(mycontext['leaderip'], msgheader)
      else:
        print 'Leader election not done'

  # Add new message from the leader (if actually from leader)
  elif msgheader.startswith( 'Message:') and ip == mycontext['leaderip']:
    # Parse out comment and save
      word = "Message:"
      message = msgheader[len(word):]

      # Try to acquire the lock before adding mesage to the board
      mycontext['lock'].acquire()
      mycontext['messages'].append(message)
      mycontext['lock'].release()

      stopcomm(thiscommhandle)

  # Process leader election message (if from participating node, adds some
  # security, only used because we already have a list of all nodes)
  elif msgheader.startswith( 'Leader:' ) and ip in mycontext['nodes']:
    stopcomm(thiscommhandle)

    # Parse election data
    electiondata = msgheader.split(':')
    initiator = electiondata[1]
    candidateid = int(electiondata[2])
    candidateip = electiondata[3]

    # If this node is the initiator the message has passed the entire ring and
    # contains the leader
    if initiator == getmyip():
      # Accessing shared variable, shouldn't cause a problem but just in case
      # first acquire the lock
      mycontext['lock'].acquire()
      mycontext['leaderid'] = candidateid
      mycontext['leaderip'] = candidateip
      mycontext['lock'].release()
    # Otherwise the node compares the candidate with itself, if the id of this
    # node is larger than the candidate (or has higher ip in case of a tie)
    # the node will place itself as the candidate. It then sends the message
    # to the next node in the ring
    else:
      if mycontext['myid'] > candidateid or (candidateid == mycontext['myid']
        and getmyip() > candidateip):
        candidateid = mycontext['myid']
        candidateip = getmyip()
      send_to_node(mycontext['ringneighbour'], (
        'Leader:'+initiator+':'+str(candidateid)+':'+candidateip))

  # Other type of message
  else:
    print 'unkown message: '+msgheader+' from '+str(ip)+':'+str(port)
    stopcomm(thiscommhandle)

if callfunc == 'initialize':
  if len(callargs) > 1:
    raise Exception("Too many call arguments")

  # Running remotely (assuming that we pass input argument only remotely):
  # whenever this vessel gets a connection on its IPaddress:Clearinghouseport
  # it'll call function board
  elif len(callargs) == 1:
    port = int(callargs[0])
    ip = getmyip()
    mycontext['port'] = port
    mycontext['messages'] = []
    mycontext['nodes'] = []

    ipfile = open("ipaddresses.txt", "r")
    for line in ipfile:
      line = line.rstrip()
      mycontext['nodes'].append(line)

    # Find the index of this node in the list of node ip addresses and choose
    # the one preceding it as its neighbor
    myix = mycontext['nodes'].index(ip)
    mycontext['ringneighbour'] = mycontext['nodes'][myix - 1]
    
    mycontext['myid'] = int( randomfloat() * 1000 )
    mycontext['leaderid'] = None
    mycontext['leaderip'] = None

    mycontext['lock'] = getlock()

    listencommhandle = waitforconn(ip,port,board)

    # Initiate leader election by sending a message on the form 
    # 'Leader:Initiator(my ip):candidate id(my id):candidate ip(my ip)'
    send_to_node(mycontext['ringneighbour'], (
      'Leader:'+ip+':'+str(mycontext['myid'])+':'+ip))

  # Running locally:
  # whenever we get a connection on 127.0.0.1:12345 we'll call board
  else:
    port = 12345
    ip = '127.0.0.1'
    listencommhandle = waitforconn(ip,port,board)